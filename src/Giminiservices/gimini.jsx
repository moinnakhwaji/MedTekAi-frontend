import GoogleGenerativeAI  from "@google/generative-ai"

  const apiKey = "AIzaSyCwb6kA2c5qphuFecmyTMU72M-uDaNPgLU";
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
  async function run() {
    const chatSession = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "i am building health care application that have a feature where the user will enter a medicine name, and i want gemini API to return the particular medicine information such as the medicine information, what is it for, why is it for, pros and cons, sideeffects, how many dose to take, when to take, how to take, etc, ensure to use simple words to explain in simple way as its all about breaking down medicine information in simple way\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Okay, this is a great use case for a large language model like Gemini. Here's a breakdown of how you can approach this using Gemini API, along with code snippets (using Python and the Gemini API library) and explanations.  Remember to install the Gemini API library first: `pip install google-generativeai`\n\n**1.  Project Structure & Setup**\n\n*   **Backend (Python/Flask/FastAPI/etc.):** This handles the API request from your frontend, calls the Gemini API, processes the response, and sends it back.\n*   **Frontend (React/Vue/Angular/etc.):**  Provides the user interface for entering the medicine name.\n\n**2.  Backend (Python Example - using Flask):**\n\n```python\nimport os\nimport google.generativeai as genai\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS  # For handling Cross-Origin Resource Sharing\n\napp = Flask(__name__)\nCORS(app)  # Enable CORS for development (adjust for production)\n\n# Configure the Gemini API (Replace with your actual API key)\nGOOGLE_API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\ngenai.configure(api_key=GOOGLE_API_KEY)\n\nmodel = genai.GenerativeModel('gemini-pro')  # Use 'gemini-pro' for text\n\n\ndef get_medicine_info(medicine_name):\n    \"\"\"\n    Uses the Gemini API to retrieve information about a medicine, simplified for easy understanding.\n    \"\"\"\n\n    prompt = f\"\"\"\n    I need clear and simple information about the medicine: {medicine_name}.  Imagine you are explaining this to someone with no medical background.\n\n    Please provide the following information, using very simple language:\n\n    *   **What it is:**  What kind of medicine is it? (e.g., pain reliever, antibiotic, etc.)\n    *   **What it's for:**  What condition or problem does it treat?\n    *   **Why it's used:** Why would a doctor prescribe this medicine?\n    *   **Pros:** What are the main benefits of taking this medicine?\n    *   **Cons:** What are the potential drawbacks of taking this medicine?  (e.g., cost, inconvenience)\n    *   **Possible Side Effects:** What are the most common and important side effects to watch out for?\n    *   **Dosage:** How many [units - e.g., pills, mL, etc.] should someone usually take? (Give a typical range).\n    *   **When to take it:** What time of day or in relation to meals should it be taken?\n    *   **How to take it:** Should it be swallowed, dissolved, etc.?  Are there any special instructions (e.g., \"take with food\")?\n    *   **Important Warnings:** Any crucial things someone *must* know before taking it (e.g., \"Do not take if you are allergic to...\", \"Avoid alcohol\")\n\n    Make sure to answer each section. If you can't find a particular answer, say 'Information not readily available'. Use a conversational, friendly tone. Be concise.\n    \"\"\"\n\n    try:\n        response = model.generate_content(prompt)\n        return response.text  # Return the generated text\n    except Exception as e:\n        print(f\"Error calling Gemini API: {e}\")\n        return \"Sorry, I couldn't retrieve information about that medicine.\"\n\n\n@app.route('/medicine_info', methods=['POST'])\ndef medicine_info():\n    data = request.get_json()\n    medicine_name = data.get('medicine_name')\n\n    if not medicine_name:\n        return jsonify({'error': 'Medicine name is required'}), 400\n\n    info = get_medicine_info(medicine_name)\n    return jsonify({'information': info})\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**3. Frontend (React Example):**\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [medicineName, setMedicineName] = useState('');\n  const [medicineInfo, setMedicineInfo] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/medicine_info', { // Replace with your backend URL\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ medicine_name: medicineName }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setMedicineInfo(data.information);\n    } catch (err) {\n      console.error(\"Error fetching medicine info:\", err);\n      setError(\"Failed to retrieve medicine information. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Medicine Information</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Enter Medicine Name:\n          <input\n            type=\"text\"\n            value={medicineName}\n            onChange={(e) => setMedicineName(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Get Information'}\n        </button>\n      </form>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      {medicineInfo && (\n        <div>\n          <h2>Medicine Information:</h2>\n          <p>{medicineInfo}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n```\n\n**4. Key Improvements and Explanations:**\n\n*   **Clear and Simple Prompt:**  The prompt is the most crucial part.  It's crafted to:\n    *   **Specify the task:**  Explicitly tells Gemini what you want.\n    *   **Define the tone:**  \"Imagine you are explaining this to someone with no medical background.\" This helps Gemini use simpler language.\n    *   **Break down the request:**  Uses bullet points to organize the information you need.\n    *   **Handle missing information:**  \"If you can't find a particular answer, say 'Information not readily available'.\"  This prevents the model from hallucinating answers.\n    *   **Encourage conciseness:**  \"Be concise.\"\n\n*   **Error Handling:** The `try...except` block in the Python code catches potential errors when calling the Gemini API and provides a user-friendly message. The React code also includes error handling to display error messages to the user if the API request fails.\n\n*   **Loading State:** The React code includes a loading state to disable the button and display a \"Loading...\" message while the API request is in progress. This provides a better user experience.\n\n*   **CORS:**  The `flask_cors` library is used to enable Cross-Origin Resource Sharing (CORS). This is important if your frontend and backend are running on different domains or ports during development.  **Important:** Configure CORS properly for production to only allow requests from your frontend's domain.\n\n*   **API Key Security:**  The example uses `os.environ.get(\"GOOGLE_API_KEY\")` to retrieve the API key from an environment variable.  **Never hardcode your API key directly in your code.**  Environment variables are a more secure way to manage sensitive information.\n\n*   **Model Selection:** The code uses `genai.GenerativeModel('gemini-pro')`.  `gemini-pro` is suitable for most text generation tasks.\n\n*   **Simple Language:** The prompt is designed to encourage Gemini to use simple language. However, you might need to experiment with the prompt to fine-tune the output.\n\n**5.  Further Improvements and Considerations:**\n\n*   **Prompt Engineering:** Experiment with different prompts to get the best results. You could try adding examples of how you want the information presented.  For instance:\n\n    ```\n    ...\n    Dosage Example:  \"For adults, the typical dose is one 200mg tablet every 4-6 hours as needed for pain.\"\n    ...\n    ```\n\n*   **Data Validation:**  The output from the Gemini API is text. You might want to add some basic validation to ensure that it's in the expected format before displaying it to the user.\n\n*   **Medical Disclaimer:**  **Crucially**, include a prominent medical disclaimer stating that the information provided is for informational purposes only and should not be considered medical advice.  Users should always consult with a healthcare professional for any health concerns or before making any decisions about treatment.  This is **essential** for a healthcare application.\n\n*   **Rate Limiting:** Be aware of the Gemini API's rate limits. Implement appropriate rate limiting in your application to avoid exceeding the limits and getting errors.\n\n*   **Context Management:** For more complex interactions, consider using Gemini's conversation history features to maintain context across multiple requests.  This could allow users to ask follow-up questions about the medicine.\n\n*   **Data Sources:** Gemini's knowledge is based on its training data. It's not connected to real-time medical databases.  The information it provides may not be the most up-to-date or comprehensive.  Consider supplementing the Gemini API with information from trusted medical databases or APIs (e.g., those from the FDA, NIH, or reputable pharmaceutical companies) for more accurate and current information.\n\n*   **User Interface:**  Design the UI to be user-friendly and accessible.  Use clear headings, bullet points, and white space to make the information easy to read and understand.\n\n*   **Testing:** Thoroughly test your application with a variety of medicine names to ensure that it provides accurate and helpful information.  Also, test edge cases and error handling.\n\n*   **Security:** Implement appropriate security measures to protect user data and prevent unauthorized access to the Gemini API.\n\n**Example Output (for \"Amoxicillin\"):**\n\n```\n**What it is:** Amoxicillin is an antibiotic.\n\n**What it's for:** It's used to treat bacterial infections.\n\n**Why it's used:** Doctors prescribe it to kill bacteria causing infections like ear infections, strep throat, or pneumonia.\n\n**Pros:** It's effective against many common bacterial infections and generally well-tolerated.\n\n**Cons:** Some people are allergic to it. It can also cause side effects.\n\n**Possible Side Effects:** Common side effects include nausea, diarrhea, and rash.\n\n**Dosage:** The usual dose is 250mg to 500mg every 8 hours, or 500mg to 875mg every 12 hours. (dosage can vary by age and infection severity).\n\n**When to take it:**  It can be taken with or without food.\n\n**How to take it:** Swallow the capsule or tablet with water.\n\n**Important Warnings:** Tell your doctor if you are allergic to penicillin antibiotics. Finish the entire course of antibiotics, even if you feel better.\n```\n\nThis comprehensive guide should get you started building your health care application feature.  Remember to prioritize user safety and accuracy by including a medical disclaimer and potentially supplementing the Gemini API with trusted medical data sources. Good luck!\n"},
          ],
        },
      ],
    });
  
    const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    console.log(result.response.text());
  }
  
  run();